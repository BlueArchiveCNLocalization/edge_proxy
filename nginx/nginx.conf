user www-data;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict cache_control 10m;

    proxy_cache_path /usr/local/openresty/nginx/proxy-cache levels=1:2 keys_zone=my_cache:10m max_size=5g inactive=365d use_temp_path=off;

    include        mime.types;
    default_type   application/octet-stream;

    sendfile       on;
    keepalive_timeout  65;

    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;

    init_worker_by_lua_block {
        local http  = require "resty.http"
        local cjson = require "cjson"

        local function fetch_catalog()
            local httpc = http.new()
            local res, err = httpc:request_uri(
                "https://prod-clientpatch.bluearchive.me/api/get_server_available_data",
                { method = "GET", ssl_verify = false }
            )
            if not res then
                ngx.log(ngx.ERR, "fetch catalog failed: ", err)
                return nil, "fetch failed"
            end
            if res.status ~= 200 then
                ngx.log(ngx.ERR, "/api/get_server_available_data returned ", res.status)
                return nil, "bad status"
            end

            local ok, tbl = pcall(cjson.decode, res.body)
            if not ok or type(tbl) ~= "table" then
                ngx.log(ngx.ERR, "invalid catalog JSON")
                return nil, "invalid JSON"
            end

            return tbl
        end

        local delay = 0  -- run immediately
        local handler
        handler = function()
            local catalog, err = fetch_catalog()
            if not catalog then
                ngx.log(ngx.ERR, "initial catalog load failed: ", err)
                -- catalog remains empty
            else
                _G.server_available_data = catalog
            end
        end

        local ok, err = ngx.timer.at(delay, handler)
        if not ok then
            ngx.log(ngx.ERR, "failed to create timer: ", err)
        end

        _G.DEFAULT_PREF = {
            localization_groups = {
                "beicheng/latest",
                "commonpng/latest",
                "scenariovoice/latest",
            }
        }

        _G.fetch_catalog = fetch_catalog
    }

    server {
        listen 80;
        listen [::]:80;
        http2 on;

        location /static/r {
            set $upstream "";
            set $upstream_host "";

            access_by_lua_block {
                local hash, rest = ngx.var.uri:match("^/static/([^/]+)/(.*)$")
                local catalog = _G.server_available_data
                local groups  = _G.DEFAULT_PREF.localization_groups
                local target
                local target_host

                if rest:find("%.hash$") then
                    target = "https://cdn.bluearchive.me/static/version.hash"
                    target_host = "cdn.bluearchive.me"
                else
                    for _, grp in ipairs(groups) do
                        local files = catalog[grp]
                        if files then
                            for _, item in ipairs(files) do
                                ngx.log(ngx.ERR, "before sub: " .. rest .. ", original: " .. rest:sub(-#item) .. ", compare: " .. item)
                                if rest:sub(-#item) == item then
                                    target = "https://cdn.bluearchive.me/" .. grp .. "/" .. item
                                    target_host = "cdn.bluearchive.me"
                                    break
                                end
                            end
                        end
                        if target then break end
                    end
                end

                if not target then
                    target = "https://prod-clientpatch.bluearchiveyostar.com/" .. hash .. "/" .. rest
                    target_host = "prod-clientpatch.bluearchiveyostar.com"
                end
                ngx.var.upstream = target
                ngx.var.upstream_host = target_host
            }

            proxy_pass $upstream;
            proxy_set_header Host   $upstream_host;

            proxy_ssl_server_name on;
            proxy_ssl_name         $upstream_host;
            proxy_ssl_protocols    TLSv1.2 TLSv1.3;
            proxy_ssl_verify       on;
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
            proxy_ssl_verify_depth   2;

            # Caching configuration
            proxy_cache my_cache;
            # Cache for a very long time (e.g., 1 year)
            proxy_cache_valid 200 365d;  # Cache 200 responses for 365 days (1 year)
            proxy_cache_use_stale updating;
            add_header X-Cache-Status $upstream_cache_status;

            # Override headers that prevent caching
            proxy_ignore_headers Cache-Control Expires;
            # Set max-age to 1 year (31536000 seconds)
            add_header Cache-Control "public, max-age=31536000";  # Cache forever (1 year)
        }

        # Caching proxy
        location / {
            proxy_pass https://cdn.bluearchive.me;
            proxy_set_header Host cdn.bluearchive.me;

            # SSL configuration
            proxy_ssl_server_name on;                     # Enable SNI
            proxy_ssl_name cdn.bluearchive.me;            # Force SNI to the hostname
            proxy_ssl_protocols TLSv1.2 TLSv1.3;          # Use secure TLS protocols
            proxy_ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
            proxy_ssl_verify on;                         # Enable certificate verification
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
            proxy_ssl_verify_depth 2;

            # Caching configuration
            proxy_cache my_cache;
            # Cache for a very long time (e.g., 1 year)
            proxy_cache_valid 200 365d;  # Cache 200 responses for 365 days (1 year)
            proxy_cache_use_stale updating;
            add_header X-Cache-Status $upstream_cache_status;

            # Override headers that prevent caching
            proxy_ignore_headers Cache-Control Expires;
            # Set max-age to 1 year (31536000 seconds)
            add_header Cache-Control "public, max-age=31536000";  # Cache forever (1 year)
        }

        # Cache clear endpoint
        location = /api/clear-cache {
            access_by_lua_file /usr/local/openresty/nginx/lua/verify.lua;
            content_by_lua_block {
                os.execute("find /usr/local/openresty/nginx/proxy-cache/ -type f -delete")
                local catalog, err = _G.fetch_catalog()
                if not catalog then
                    ngx.log(ngx.ERR, "refresh catalog failed: ", err)
                    return ngx.exit(500)
                end
                _G.server_available_data = catalog
                ngx.status = 200
                ngx.say("Cache cleared")
            }
        }
    }
}
